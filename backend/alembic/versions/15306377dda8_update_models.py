"""update models

Revision ID: 15306377dda8
Revises: f39200a06e45
Create Date: 2025-07-14 19:04:12.592930

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '15306377dda8'
down_revision: Union[str, Sequence[str], None] = 'f39200a06e45'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('package_detail_schedule',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('package_id', sa.UUID(), nullable=False),
    sa.Column('highlights', sa.TEXT(), nullable=True),
    sa.Column('itinerary', sa.TEXT(), nullable=True),
    sa.Column('inclusions', sa.TEXT(), nullable=True),
    sa.Column('exclusions', sa.TEXT(), nullable=True),
    sa.Column('terms_conditions', sa.TEXT(), nullable=True),
    sa.Column('duration_days', sa.INTEGER(), nullable=False),
    sa.Column('duration_nights', sa.INTEGER(), nullable=False),
    sa.Column('max_group_size', sa.INTEGER(), nullable=True),
    sa.Column('available_from', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('available_until', postgresql.TIMESTAMP(), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['package_id'], ['packages.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('package_id')
    )
    op.drop_table('package_schedules')
    op.drop_table('package_details')
    op.create_unique_constraint(None, 'users', ['passport'])
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'users', type_='unique')
    op.create_table('package_details',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('package_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('highlights', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('itinerary', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('inclusions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('exclusions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('terms_conditions', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['package_id'], ['packages.id'], name=op.f('package_details_package_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('package_details_pkey')),
    sa.UniqueConstraint('package_id', name=op.f('package_details_package_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('package_schedules',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('package_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('duration_days', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('duration_nights', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('max_group_size', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('available_from', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('available_until', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['package_id'], ['packages.id'], name=op.f('package_schedules_package_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('package_schedules_pkey')),
    sa.UniqueConstraint('package_id', name=op.f('package_schedules_package_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.drop_table('package_detail_schedule')
    # ### end Alembic commands ###
