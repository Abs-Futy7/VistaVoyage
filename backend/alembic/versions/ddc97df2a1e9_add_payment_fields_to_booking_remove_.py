"""add_payment_fields_to_booking_remove_booking_payment_table

Revision ID: ddc97df2a1e9
Revises: 3b073b1f7182
Create Date: 2025-07-09 12:31:31.240639

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
import sqlmodel
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'ddc97df2a1e9'
down_revision: Union[str, Sequence[str], None] = '3b073b1f7182'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # First, add columns as nullable
    op.add_column('bookings', sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), nullable=True))
    op.add_column('bookings', sa.Column('paid_amount', sa.NUMERIC(precision=10, scale=2), nullable=True))
    op.add_column('bookings', sa.Column('discount_amount', sa.NUMERIC(precision=10, scale=2), nullable=True))
    
    # Update existing bookings with default values
    # First, try to get data from booking_payments table if it exists
    connection = op.get_bind()
    
    # Check if booking_payments table exists and has data
    try:
        result = connection.execute(sa.text("SELECT 1 FROM booking_payments LIMIT 1")).fetchone()
        if result:
            # Migrate data from booking_payments table
            connection.execute(sa.text("""
                UPDATE bookings 
                SET total_amount = bp.total_amount,
                    paid_amount = bp.paid_amount,
                    discount_amount = bp.discount_amount
                FROM booking_payments bp 
                WHERE bookings.id = bp.booking_id
            """))
    except:
        pass  # booking_payments table doesn't exist or is empty
    
    # Set default values for any remaining null values
    connection.execute(sa.text("""
        UPDATE bookings 
        SET total_amount = COALESCE(total_amount, 0.0),
            paid_amount = COALESCE(paid_amount, 0.0),
            discount_amount = COALESCE(discount_amount, 0.0)
        WHERE total_amount IS NULL OR paid_amount IS NULL OR discount_amount IS NULL
    """))
    
    # Now make the columns non-nullable
    op.alter_column('bookings', 'total_amount', nullable=False, server_default='0.0')
    op.alter_column('bookings', 'paid_amount', nullable=False, server_default='0.0')
    op.alter_column('bookings', 'discount_amount', nullable=False, server_default='0.0')
    
    # Finally, drop the booking_payments table
    op.drop_table('booking_payments')


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('bookings', 'discount_amount')
    op.drop_column('bookings', 'paid_amount')
    op.drop_column('bookings', 'total_amount')
    op.create_table('booking_payments',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('booking_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('total_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('paid_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('discount_amount', sa.NUMERIC(precision=10, scale=2), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['booking_id'], ['bookings.id'], name=op.f('booking_payments_booking_id_fkey'), ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('booking_payments_pkey')),
    sa.UniqueConstraint('booking_id', name=op.f('booking_payments_booking_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###
